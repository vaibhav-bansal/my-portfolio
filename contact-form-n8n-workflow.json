{
  "name": "Contact Form Handler",
  "nodes": [
    {
      "parameters": {
        "httpMethod": "POST",
        "path": "contact-form",
        "responseMode": "responseNode",
        "options": {}
      },
      "id": "webhook-trigger",
      "name": "Webhook Trigger",
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 1,
      "position": [
        240,
        300
      ],
      "webhookId": "contact-form-webhook"
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict"
          },
          "conditions": [
            {
              "id": "name-validation",
              "leftValue": "={{ $json.name }}",
              "rightValue": "",
              "operator": {
                "type": "string",
                "operation": "isNotEmpty"
              }
            },
            {
              "id": "email-validation",
              "leftValue": "={{ $json.email }}",
              "rightValue": "",
              "operator": {
                "type": "string",
                "operation": "isNotEmpty"
              }
            },
            {
              "id": "message-validation",
              "leftValue": "={{ $json.message }}",
              "rightValue": "",
              "operator": {
                "type": "string",
                "operation": "isNotEmpty"
              }
            },
            {
              "id": "phone-validation",
              "leftValue": "={{ $json.phone }}",
              "rightValue": "",
              "operator": {
                "type": "string",
                "operation": "regex",
                "singleValue": "^$|^[\\d\\s\\-\\(\\)]+$"
              }
            },
            {
              "id": "email-format-validation",
              "leftValue": "={{ $json.email }}",
              "rightValue": "^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$",
              "operator": {
                "type": "string",
                "operation": "regex"
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "id": "data-validation",
      "name": "Data Validation",
      "type": "n8n-nodes-base.if",
      "typeVersion": 2,
      "position": [
        460,
        300
      ]
    },
    {
      "parameters": {
        "jsCode": "// Transform and clean the contact form data\nconst data = $input.first().json;\n\n// Clean and format the data\nconst cleanedData = {\n  name: data.name?.trim() || '',\n  email: data.email?.trim().toLowerCase() || '',\n  phone: data.phone?.trim() || '',\n  countryCode: data.countryCode || '+91',\n  fullPhone: data.fullPhone || '',\n  message: data.message?.trim() || '',\n  timestamp: data.timestamp || new Date().toISOString(),\n  source: data.source || 'vaibhav.bio',\n  ip: $json.headers?.['x-forwarded-for'] || $json.headers?.['x-real-ip'] || 'unknown',\n  userAgent: $json.headers?.['user-agent'] || 'unknown'\n};\n\n// Add additional metadata\ncleanedData.formattedDate = new Date(cleanedData.timestamp).toLocaleString('en-US', {\n  timeZone: 'UTC',\n  year: 'numeric',\n  month: 'long',\n  day: 'numeric',\n  hour: '2-digit',\n  minute: '2-digit',\n  second: '2-digit'\n});\n\n// Generate a unique reference ID\ncleanedData.referenceId = `CF-${Date.now()}-${Math.random().toString(36).substr(2, 9)}`;\n\nreturn {\n  json: cleanedData\n};"
      },
      "id": "data-transformation",
      "name": "Data Transformation",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        680,
        200
      ]
    },
    {
      "parameters": {
        "fromEmail": "noreply@vaibhav.bio",
        "toEmail": "your-email@example.com",
        "subject": "New Contact Form Submission - {{ $json.referenceId }}",
        "emailFormat": "html",
        "message": "<!DOCTYPE html>\n<html>\n<head>\n    <meta charset=\"utf-8\">\n    <title>New Contact Form Submission</title>\n    <style>\n        body { font-family: Arial, sans-serif; line-height: 1.6; color: #333; }\n        .container { max-width: 600px; margin: 0 auto; padding: 20px; }\n        .header { background: #f8f9fa; padding: 20px; border-radius: 8px; margin-bottom: 20px; }\n        .content { background: #fff; padding: 20px; border: 1px solid #e9ecef; border-radius: 8px; }\n        .field { margin-bottom: 15px; }\n        .label { font-weight: bold; color: #495057; }\n        .value { margin-top: 5px; padding: 10px; background: #f8f9fa; border-radius: 4px; }\n        .message-content { white-space: pre-wrap; }\n        .metadata { font-size: 0.9em; color: #6c757d; margin-top: 20px; padding-top: 20px; border-top: 1px solid #e9ecef; }\n        .reference { background: #e3f2fd; padding: 10px; border-radius: 4px; margin-bottom: 15px; }\n    </style>\n</head>\n<body>\n    <div class=\"container\">\n        <div class=\"header\">\n            <h2>üìß New Contact Form Submission</h2>\n            <div class=\"reference\">\n                <strong>Reference ID:</strong> {{ $json.referenceId }}\n            </div>\n        </div>\n        \n        <div class=\"content\">\n            <div class=\"field\">\n                <div class=\"label\">üë§ Name:</div>\n                <div class=\"value\">{{ $json.name }}</div>\n            </div>\n            \n            <div class=\"field\">\n                <div class=\"label\">üìß Email:</div>\n                <div class=\"value\"><a href=\"mailto:{{ $json.email }}\">{{ $json.email }}</a></div>\n            </div>\n            \n            {{#if $json.fullPhone}}\n            <div class=\"field\">\n                <div class=\"label\">üì± Phone:</div>\n                <div class=\"value\"><a href=\"tel:{{ $json.fullPhone }}\">{{ $json.fullPhone }}</a></div>\n            </div>\n            {{/if}}\n            \n            <div class=\"field\">\n                <div class=\"label\">üí¨ Message:</div>\n                <div class=\"value message-content\">{{ $json.message }}</div>\n            </div>\n            \n            <div class=\"metadata\">\n                <div class=\"field\">\n                    <div class=\"label\">üïí Submitted:</div>\n                    <div class=\"value\">{{ $json.formattedDate }} UTC</div>\n                </div>\n                \n                <div class=\"field\">\n                    <div class=\"label\">üåê Source:</div>\n                    <div class=\"value\">{{ $json.source }}</div>\n                </div>\n                \n                <div class=\"field\">\n                    <div class=\"label\">üîó IP Address:</div>\n                    <div class=\"value\">{{ $json.ip }}</div>\n                </div>\n                \n                <div class=\"field\">\n                    <div class=\"label\">üñ•Ô∏è User Agent:</div>\n                    <div class=\"value\">{{ $json.userAgent }}</div>\n                </div>\n            </div>\n        </div>\n    </div>\n</body>\n</html>",
        "options": {}
      },
      "id": "send-email",
      "name": "Send Email Notification",
      "type": "n8n-nodes-base.emailSend",
      "typeVersion": 2,
      "position": [
        900,
        200
      ]
    },
    {
      "parameters": {
        "respondWith": "json",
        "responseBody": "={{ JSON.stringify({ success: true, message: 'Message sent successfully', referenceId: $json.referenceId, timestamp: $json.timestamp }) }}",
        "options": {}
      },
      "id": "success-response",
      "name": "Success Response",
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1,
      "position": [
        1120,
        200
      ]
    },
    {
      "parameters": {
        "respondWith": "json",
        "responseBody": "={{ JSON.stringify({ success: false, error: 'Validation failed', message: 'Please check that all fields are filled correctly and email format is valid' }) }}",
        "responseCode": 400,
        "options": {}
      },
      "id": "validation-error-response",
      "name": "Validation Error Response",
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1,
      "position": [
        680,
        400
      ]
    },
    {
      "parameters": {
        "respondWith": "json",
        "responseBody": "={{ JSON.stringify({ success: false, error: 'Internal server error', message: 'An error occurred while processing your request' }) }}",
        "responseCode": 500,
        "options": {}
      },
      "id": "error-response",
      "name": "Error Response",
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1,
      "position": [
        1120,
        400
      ]
    },
    {
      "parameters": {
        "jsCode": "// Log the error for debugging\nconsole.error('Contact form processing error:', $input.first().json);\n\n// Return error information\nreturn {\n  json: {\n    error: 'Email sending failed',\n    timestamp: new Date().toISOString(),\n    originalData: $input.first().json\n  }\n};"
      },
      "id": "error-handler",
      "name": "Error Handler",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        900,
        400
      ]
    }
  ],
  "connections": {
    "Webhook Trigger": {
      "main": [
        [
          {
            "node": "Data Validation",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Data Validation": {
      "main": [
        [
          {
            "node": "Data Transformation",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Validation Error Response",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Data Transformation": {
      "main": [
        [
          {
            "node": "Send Email Notification",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Send Email Notification": {
      "main": [
        [
          {
            "node": "Success Response",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Error Handler",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Error Handler": {
      "main": [
        [
          {
            "node": "Error Response",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "pinData": {},
  "settings": {
    "executionOrder": "v1"
  },
  "staticData": null,
  "tags": [
    {
      "createdAt": "2024-01-01T00:00:00.000Z",
      "updatedAt": "2024-01-01T00:00:00.000Z",
      "id": "contact-form",
      "name": "Contact Form"
    }
  ],
  "triggerCount": 1,
  "updatedAt": "2024-01-01T00:00:00.000Z",
  "versionId": "1"
}
